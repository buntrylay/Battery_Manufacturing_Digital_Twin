@startuml Simulation Package Architecture

package "simulation" {
    
    package "battery_model" {
        abstract class BaseModel {
            +get_properties(): dict
            +update_properties(**kwargs): void
        }
        
        class MixingModel {
            +electrode_type: str
            +AM: float
            +CA: float
            +PVDF: float
            +H2O: float
            +NMP: float
            +solvent: str
            +viscosity: float
            +density: float
            +yield_stress: float
            +total_time: float
            
            +add(component: str, amount: float): void
            +get_total_volume(): float
            +update_properties(viscosity, density, yield_stress): void
            +update_density(temperature, pressure): void
            +get_properties(): dict
        }
        
        class CoatingModel {
            +solid_content: float
            +viscosity: float
            +wet_thickness: float
            +wet_width: float
            +uniformity_wet: float
            +shear_rate: float
            +total_solids: float
            +total_volume: float
            
            +__init__(slurry: MixingModel): void
            +get_properties(): dict
        }
    }
    
    package "machine" {
        abstract class BaseMachine {
            +id: str
            +model: BaseModel
            +machine_parameters: dict
            +is_on: bool
            +connection_string: str
            +iot_client: IoTHubDeviceClient
            +lock: threading.Lock
            +total_time: float
            +start_datetime: datetime
            +output_dir: str
            
            +turn_on(): void
            +turn_off(): void
            +send_json_to_iothub(data: dict): void
            +get_current_properties(): dict
            +{abstract} run(): void
        }
        
        class MixingMachine {
            +electrode_type: str
            +volume: float
            +ratios: dict
            +RHO_values: dict
            +WEIGHTS_values: dict
            +calculator: SlurryPropertyCalculator
            
            +run(step_percent: float, pause_sec: float): void
            +get_final_slurry(): MixingModel
            +_mix_component(component: str, step_percent: float, pause_sec: float): void
            +_save_final_results(): void
        }
        
        class CoatingMachine {
            +coating_speed: float
            +gap_height: float
            +flow_rate: float
            +coating_width: float
            +viscosity_pa: float
            +solid_content: float
            +calculator: CoatingPropertyCalculator
            +start_datetime: datetime
            +total_time: float
            +lock: threading.Lock
            +output_dir: str
            
            +run(): void
            +get_final_coating(): tuple
            +_simulate(end_time: int): void
            +_format_result(step: int, is_final: bool): dict
            +_write_json(data: dict, filename: str): void
        }
    }
    
    package "sensor" {
        class SlurryPropertyCalculator {
            +RHO_values: dict
            +WEIGHTS_values: dict
            
            +calculate_density(model: MixingModel): float
            +calculate_viscosity(model: MixingModel): float
            +calculate_yield_stress(model: MixingModel): float
        }
        
        class CoatingPropertyCalculator {
            +calculate_shear_rate(coating_speed: float, gap_height: float): float
            +calculate_wet_thickness(flow_rate: float, coating_speed: float, coating_width: float): float
            +calculate_dry_thickness(wet_thickness: float, solid_content: float): float
            +check_defect_risk(coating_speed: float, gap_height: float, viscosity: float): str
            +calculate_uniformity(shear_rate: float): float
        }
    }
}

' Inheritance relationships
BaseModel <|-- MixingModel
BaseModel <|-- CoatingModel

BaseMachine <|-- MixingMachine
BaseMachine <|-- CoatingMachine

' Composition relationships
MixingMachine --> MixingModel : operates on
MixingMachine --> SlurryPropertyCalculator : uses

CoatingMachine --> CoatingModel : operates on
CoatingMachine --> CoatingPropertyCalculator : uses

' Data flow relationships
MixingModel --> CoatingModel : feeds into

' Notes
note right of MixingModel : "State: composition, properties"
note right of CoatingModel : "Derived from MixingModel"
note right of BaseMachine : "Common: IoT, locking, output, timing"
note right of sensor : "Stateless calculation engines"

@enduml
